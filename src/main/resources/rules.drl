/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.simple.SimpleScoreHolder;
import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;


import domain.Counter;
import domain.FgAllocator;
import domain.FlightGroup;
import domain.Requirement;

global BendableScoreHolder scoreHolder;



rule "overlapping"
    when
        $req : Requirement($counter:counter)
        Requirement(counter==$counter,isOverlappedWith($req))
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,-2);
end


rule "unavailable_counter"
 when
    $req : Requirement()
    Counter(!isAvailable($req.startTime,$req.endTime))
 then
    scoreHolder.addHardConstraintMatch(kcontext,0,-2);
end

//kel ma tle2e tnn requirement la same fg 3indon counters 7ad ba3ed zid  lscore
rule "siblings_enforcer"
    when
        Requirement($fg:flightGroup, counter!=null, $counter:counter,$classType:classType)
        Requirement(flightGroup==$fg, counter!=null, counter.equals($counter.next()))
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,+2);
end

//kel ma tle2e tnn requirement la same fg 3indon counters 7ad ba3ed w henne "mannon same class", "na22es" lscore * 0.5 weight
rule "class_enforcer"
    when
        Requirement($fg:flightGroup, counter!=null, $counter:counter, $classType:classType)
        Requirement(flightGroup==$fg, counter!=null, counter.equals($counter.next()), $classType!= classType)
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,-1);
end

//kel ma tle2e tnn requirement la same fg 3indon counters 7ad ba3ed w henne "mannon in the same zone", "na22es" lscore
rule "zone_enforcer"
    when
        Requirement($fg:flightGroup, counter!=null, $counter:counter)
        Requirement(flightGroup==$fg, counter!=null, counter.equals($counter.next()), counter.isInSameZone($counter))
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,-2);
end

rule "unplanned_penalty"
    when
        FlightGroup(planned == false)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,0,-2);
end


rule "fg_preferences"
when
        $req: Requirement(counter != null,counter.range.zone != null,flightGroup != null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,1,$req.getFlightGroup().getPreference($req.getCounter().getRange().getZone()));
        scoreHolder.addSoftConstraintMatch(kcontext,1,$req.getCounter().getProximity());
end

//sar fi 3inna range badal zone fa sar badda ghyar
rule "zone_congestion"
when
        $fg : FlightGroup()
        $req : Requirement(flightGroup==$fg, counter != null,counter.range.zone!=null)
        exists Requirement(flightGroup==$fg, counter != null,counter.range.zone!=null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,2,-$req.getCounter().getRange().getZone().congestion($fg));
end

//
rule "conjunction _congestion"
when
        $fg : FlightGroup()
    then
        scoreHolder.addSoftConstraintMatch(kcontext,3,-$fg.conjunctionCongestion());
end
