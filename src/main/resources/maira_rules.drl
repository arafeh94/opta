/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.simple.SimpleScoreHolder;
import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;


import domain.Counter;
import domain.FgAllocator;
import domain.FlightGroup;
import domain.Requirement;

global BendableScoreHolder scoreHolder;



rule "overlapping"
    when
        $req : Requirement($counter:counter)
        Requirement(counter==$counter,isOverlappedWith($req))
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,-2);
end

//hyde saret ghalat ba3ed ma albna l counter unvaiable la time bass
rule "unavailable_counter"
 when
    $req : Requirement()
    Counter(!isAvailable($req.startTime,$req.endTime))
 then
    scoreHolder.addHardConstraintMatch(kcontext,0,-2);
end

//hone sar lezm zid l range bel mawdou3, iza ken l next counter don't have the same range ya3ne mannu mazbuta
rule "siblings_enforcer"
    when
        Requirement($fg:flightGroup,$counter:counter,$classType:classType)
        $next : Counter($counter != null && id == $counter.getId()+1)
        Requirement(flightGroup==$fg,counter==$next)
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,+2);
end

//kamena badda teghyir metel l oula
rule "class_enforcer"
    when
        Requirement($fg:flightGroup,$counter:counter,$classType:classType)
        $next : Counter($counter != null && id == $counter.getId()+1)
        Requirement(flightGroup==$fg,counter==$next,$classType!= classType)
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,-1);
end

//kamena same lli fo2
rule "zone_enforcer"
    when
        Requirement($fg:flightGroup,$counter:counter,$classType:classType)
        $next : Counter($counter != null && id == $counter.getId()+1)
        Requirement(flightGroup==$fg,counter==$next,counter.zone != $next.zone)
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,-2);
end

//ana ma3 nshila la he
rule "unplanned_penalty"
    when
        FlightGroup(planned == false)
    then
        scoreHolder.addHardConstraintMatch(kcontext,0,-2);
end

//ma tghyret
rule "fg_preferences"
when
        $req: Requirement(counter != null,counter.getZone() != null,flightGroup != null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,0,$req.getFlightGroup().getPreference($req.getCounter().getZone()));
        scoreHolder.addSoftConstraintMatch(kcontext,0,$req.getCounter().getProximity());
end

//sar fi 3inna range badal zone fa sar badda ghyar
rule "zone_congestion"
when
        $fg : FlightGroup()
        $req : Requirement(flightGroup==$fg, counter != null,counter.getZone() != null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext,1,-$req.getCounter().getZone().congestion($fg));
end
